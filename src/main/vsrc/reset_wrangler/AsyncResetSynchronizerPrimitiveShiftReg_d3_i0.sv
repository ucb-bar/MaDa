// Generated by CIRCT firtool-1.75.0

// Include register initializers in init blocks unless synthesis is set
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for register randomization.

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_
module AsyncResetSynchronizerPrimitiveShiftReg_d3_i0(	// @[generators/rocket-chip/src/main/scala/util/SynchronizerReg.scala:68:19]
  input  clock,	// @[generators/rocket-chip/src/main/scala/util/SynchronizerReg.scala:68:19]
  input  reset,	// @[generators/rocket-chip/src/main/scala/util/SynchronizerReg.scala:68:19]
  input  io_d,	// @[generators/rocket-chip/src/main/scala/util/ShiftReg.scala:36:14]
  output io_q	// @[generators/rocket-chip/src/main/scala/util/ShiftReg.scala:36:14]
);

  reg sync_0;	// @[generators/rocket-chip/src/main/scala/util/SynchronizerReg.scala:51:87]
  reg sync_1;	// @[generators/rocket-chip/src/main/scala/util/SynchronizerReg.scala:51:87]
  reg sync_2;	// @[generators/rocket-chip/src/main/scala/util/SynchronizerReg.scala:51:87]
  always @(posedge clock or posedge reset) begin	// @[generators/rocket-chip/src/main/scala/util/SynchronizerReg.scala:68:19]
    if (reset) begin	// @[generators/rocket-chip/src/main/scala/util/SynchronizerReg.scala:68:19]
      sync_0 <= 1'h0;	// @[generators/rocket-chip/src/main/scala/util/SynchronizerReg.scala:51:87, :68:19]
      sync_1 <= 1'h0;	// @[generators/rocket-chip/src/main/scala/util/SynchronizerReg.scala:51:87, :68:19]
      sync_2 <= 1'h0;	// @[generators/rocket-chip/src/main/scala/util/SynchronizerReg.scala:51:87, :68:19]
    end
    else begin	// @[generators/rocket-chip/src/main/scala/util/SynchronizerReg.scala:68:19]
      sync_0 <= sync_1;	// @[generators/rocket-chip/src/main/scala/util/SynchronizerReg.scala:51:87]
      sync_1 <= sync_2;	// @[generators/rocket-chip/src/main/scala/util/SynchronizerReg.scala:51:87]
      sync_2 <= io_d;	// @[generators/rocket-chip/src/main/scala/util/SynchronizerReg.scala:51:87]
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_	// @[generators/rocket-chip/src/main/scala/util/SynchronizerReg.scala:68:19]
    `ifdef FIRRTL_BEFORE_INITIAL	// @[generators/rocket-chip/src/main/scala/util/SynchronizerReg.scala:68:19]
      `FIRRTL_BEFORE_INITIAL	// @[generators/rocket-chip/src/main/scala/util/SynchronizerReg.scala:68:19]
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];	// @[generators/rocket-chip/src/main/scala/util/SynchronizerReg.scala:68:19]
    initial begin	// @[generators/rocket-chip/src/main/scala/util/SynchronizerReg.scala:68:19]
      `ifdef INIT_RANDOM_PROLOG_	// @[generators/rocket-chip/src/main/scala/util/SynchronizerReg.scala:68:19]
        `INIT_RANDOM_PROLOG_	// @[generators/rocket-chip/src/main/scala/util/SynchronizerReg.scala:68:19]
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// @[generators/rocket-chip/src/main/scala/util/SynchronizerReg.scala:68:19]
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;	// @[generators/rocket-chip/src/main/scala/util/SynchronizerReg.scala:68:19]
        sync_0 = _RANDOM[/*Zero width*/ 1'b0][0];	// @[generators/rocket-chip/src/main/scala/util/SynchronizerReg.scala:51:87, :68:19]
        sync_1 = _RANDOM[/*Zero width*/ 1'b0][1];	// @[generators/rocket-chip/src/main/scala/util/SynchronizerReg.scala:51:87, :68:19]
        sync_2 = _RANDOM[/*Zero width*/ 1'b0][2];	// @[generators/rocket-chip/src/main/scala/util/SynchronizerReg.scala:51:87, :68:19]
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin	// @[generators/rocket-chip/src/main/scala/util/SynchronizerReg.scala:68:19]
        sync_0 = 1'h0;	// @[generators/rocket-chip/src/main/scala/util/SynchronizerReg.scala:51:87, :68:19]
        sync_1 = 1'h0;	// @[generators/rocket-chip/src/main/scala/util/SynchronizerReg.scala:51:87, :68:19]
        sync_2 = 1'h0;	// @[generators/rocket-chip/src/main/scala/util/SynchronizerReg.scala:51:87, :68:19]
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// @[generators/rocket-chip/src/main/scala/util/SynchronizerReg.scala:68:19]
      `FIRRTL_AFTER_INITIAL	// @[generators/rocket-chip/src/main/scala/util/SynchronizerReg.scala:68:19]
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_q = sync_0;	// @[generators/rocket-chip/src/main/scala/util/SynchronizerReg.scala:51:87, :68:19]
endmodule

